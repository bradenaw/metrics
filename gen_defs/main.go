package main

import (
	"fmt"
	"os"
	"strings"
	"text/template"
)

func main() {
	fmt.Println("package metrics")
	fmt.Println()
	fmt.Println("// generated by `go run ./gen_defs > defs_generated.go && gofmt -w defs_generated.go`")
	fmt.Println()

	type vars struct {
		N           int
		Ns          []int
		Metric      string
		MetricLower string
	}

	n := 6
	ns := make([]int, n)
	for j := range ns {
		ns[j] = j
	}

	for _, metric := range []string{"Counter", "Gauge"} {
		for i := 2; i < n; i++ {
			counterGaugeTmpl.Execute(os.Stdout, vars{
				N:           i,
				Ns:          ns[:i],
				Metric:      metric,
				MetricLower: strings.ToLower(metric),
			})

			for k := 1; k <= i-1; k++ {
				bindPrefixTmpl.Execute(os.Stdout, struct {
					N        int
					Ns       []int
					K        int
					Ks       []int
					NMinusK  int
					NMinusKs []int
					Metric   string
				}{
					N:        i,
					Ns:       ns[:i],
					K:        k,
					Ks:       ns[:k],
					NMinusK:  i - k,
					NMinusKs: ns[k:i],
					Metric:   metric,
				})
			}
		}
	}
	for _, metric := range []string{"Histogram", "Distribution"} {
		for i := 2; i < n; i++ {
			histogramDistributionTmpl.Execute(os.Stdout, vars{
				N:           i,
				Ns:          ns[:i],
				Metric:      metric,
				MetricLower: strings.ToLower(metric),
			})
		}
	}

	for i := 2; i < n; i++ {
		setTmpl.Execute(os.Stdout, vars{
			N:           i,
			Ns:          ns[:i],
			Metric:      "Set",
			MetricLower: "set",
		})
	}
}

var counterGaugeTmpl = template.Must(template.New("name").Parse(`
type {{.Metric}}Def{{.N}}[{{range .Ns}} V{{.}} TagValue, {{end}}] struct {
	name   string
	prefix []string
	keys   [{{.N}}]string
}

func New{{.Metric}}Def{{.N}}[{{range .Ns}} V{{.}} TagValue, {{end}}](
	name string,
	description string,
	unit Unit,
	keys [{{.N}}]string,
) *{{.Metric}}Def{{.N}}[{{range .Ns}} V{{.}}, {{end}}] {
	registerDef({{.MetricLower}}Type, name, unit, description)
	return &{{.Metric}}Def{{.N}}[{{range .Ns}} V{{.}}, {{end}}]{
		name:       name,
		keys:       keys,
	}
}

func (h *{{.Metric}}Def{{.N}}[{{range .Ns}} V{{.}}, {{end}}]) Bind(m *Metrics {{range .Ns}}, v{{.}} V{{.}} {{end}}) *{{.Metric}} {
	return m.{{.MetricLower}}(h.name,  joinStrings(h.prefix, []string{
		{{range .Ns}}
		makeTag(h.keys[{{.}}], tagValueString(v{{.}})),
		{{ end }}
	}))
}
`))

var histogramDistributionTmpl = template.Must(template.New("name").Parse(`
type {{.Metric}}Def{{.N}}[{{range .Ns}} V{{.}} TagValue, {{end}}] struct {
	name       string
	keys       [{{.N}}]string
	sampleRate float64
}

func New{{.Metric}}Def{{.N}}[{{range .Ns}} V{{.}} TagValue, {{end}}](
	name string,
	description string,
	unit Unit,
	keys [{{.N}}]string,
	sampleRate float64,
) *{{.Metric}}Def{{.N}}[{{range .Ns}} V{{.}}, {{end}}] {
	registerDef({{.MetricLower}}Type, name, unit, description)
	return &{{.Metric}}Def{{.N}}[{{range .Ns}} V{{.}}, {{end}}]{
		name:       name,
		keys:       keys,
		sampleRate: sampleRate,
	}
}

func (h *{{.Metric}}Def{{.N}}[{{range .Ns}} V{{.}}, {{end}}]) Bind(m *Metrics {{range .Ns}}, v{{.}} V{{.}} {{end}}) *{{.Metric}} {
	return &{{.Metric}}{
		m:    m,
		name: h.name,
		tags: []string{
			{{range .Ns}}
			makeTag(h.keys[{{.}}], tagValueString(v{{.}})),
			{{ end }}
		},
		sampleRate: h.sampleRate,
	}
}
`))

var setTmpl = template.Must(template.New("name").Parse(`
type {{.Metric}}Def{{.N}}[K any, {{range .Ns}} V{{.}} TagValue, {{end}}] struct {
	name       string
	keys       [{{.N}}]string
	sampleRate float64
}

func New{{.Metric}}Def{{.N}}[K any, {{range .Ns}} V{{.}} TagValue, {{end}}](
	name string,
	description string,
	unit Unit,
	keys [{{.N}}]string,
	sampleRate float64,
) *{{.Metric}}Def{{.N}}[K, {{range .Ns}} V{{.}}, {{end}}] {
	registerDef({{.MetricLower}}Type, name, unit, description)
	return &{{.Metric}}Def{{.N}}[K, {{range .Ns}} V{{.}}, {{end}}]{
		name:       name,
		keys:       keys,
		sampleRate: sampleRate,
	}
}

func (h *{{.Metric}}Def{{.N}}[K, {{range .Ns}} V{{.}}, {{end}}]) Bind(m *Metrics {{range .Ns}}, v{{.}} V{{.}} {{end}}) *{{.Metric}}[K] {
	return &{{.Metric}}[K]{
		m:    m,
		name: h.name,
		tags: []string{
			{{range .Ns}}
			makeTag(h.keys[{{.}}], tagValueString(v{{.}})),
			{{ end }}
		},
		sampleRate: h.sampleRate,
	}
}
`))

var bindPrefixTmpl = template.Must(template.New("name").Parse(`
func (h *{{.Metric}}Def{{.N}}[{{range .Ns}} V{{.}}, {{end}}]) BindPrefix{{.K}}({{range .Ks}} v{{.}} V{{.}}, {{end}}) *{{.Metric}}Def{{.NMinusK}}[{{range .NMinusKs}} V{{.}}, {{end}}] {
	return &{{.Metric}}Def{{.NMinusK}}[{{range .NMinusKs}} V{{.}}, {{end}}]{
		name: h.name,
		prefix: []string{
			{{range .Ks}}
			makeTag(h.keys[{{.}}], tagValueString(v{{.}})),
			{{ end }}
		},
		keys: *((*[{{.NMinusK}}]string)(h.keys[{{.K}}:])),
	}
}
`))
